#+TITLE: Emacs Config
#+AUTHOR: gr13nka
#+DESCRIPTION: Emacs config.


* Tab bar mode(workspaces)
pr - prefix C-x t
pr 2 - new tab
C-S-tab - switch between
* IMPORTANT PROGRAMS TO LOAD FIRST
** Package Managment
#+begin_src emacs-lisp
(require 'package)
(require 'org-macs)
(add-to-list 'package-archives '("gnu"   . "https://elpa.gnu.org/packages/"))
(add-to-list 'package-archives '("melpa" . "https://melpa.org/packages/"))
(package-initialize)

(unless (package-installed-p 'use-package)
  (package-refresh-contents)
  (package-install 'use-package))
(eval-and-compile
  (setq use-package-always-ensure t
        use-package-expand-minimally t))
#+end_src
** Load Evil Mode
#+begin_src emacs-lisp
;; Download Evil
(unless (package-installed-p 'evil)
  (package-install 'evil))
;; Enable Evil
(require 'evil)
(evil-mode 0) 
#+end_src

* Useful modes
** wrap lines as usual 
#+begin_src emacs-lisp
(global-visual-line-mode t)
#+end_src
** Automaticaly refresh changed files everywhere
#+begin_src emacs-lisp
(setq global-auto-revert-non-file-buffers t)
#+end_src
** Remove customize things from init.el
#+begin_src emacs-lisp
(setq custom-file (locate-user-emacs-file "custom-vars.el"))
;;(load custom-file 'noerror 'nomessage)
#+end_src
** Save history
In M-x use M-p and M-n to cycle through
#+begin_src emacs-lisp
  (setq history-length 25)
  (savehist-mode 1)
  ;; Remembers your location in file
  (save-place-mode 1)
#+end_src
** Start Screen recent files at the start
#+begin_src emacs-lisp
(add-hook 'emacs-startup-hook #'recentf-open-files)
#+end_src
* Dired
#+begin_src emacs-lisp
(require 'dired)
(setq dired-recursive-deletes 'top) ;; чтобы можно было непустые директории удалять...
#+end_src

Интерактивный поиск и открытие файлов? Пожалуйста:

;#+begin_src emacs-lisp
;; IDO plugin
(require 'ido)
(ido-mode                      t)
(icomplete-mode                t)
(ido-everywhere                t)
(setq ido-vitrual-buffers      t)
(setq ido-enable-flex-matching t)
;#+end_src
** ibuffer 
;#+begin_src emacs-lisp
;; Buffer Selection and ibuffer settings
(require 'bs)
(require 'ibuffer)
(defalias 'list-buffers 'ibuffer) ;; отдельный список буферов при нажатии C-x C-b
(global-set-key (kbd "<f2>") 'bs-show) ;; запуск buffer selection кнопкой F2
;#+end_src

** ALL THE ICONS
This is an icon set that can be used with dashboard, dired, ibuffer and other Emacs programs.
#+begin_src emacs-lisp
(use-package all-the-icons
  :ensure t
  :if (display-graphic-p))

(use-package all-the-icons-dired
  :hook (dired-mode . (lambda () (all-the-icons-dired-mode t))))
#+end_src

* Programing stuff
Замечательный способ «прыгать» по определениям функций почти для всех языков программирования — Imenu. Предположим, что у Вас файл с программой на 100500 строк с кучей функций. Не беда! Нажимаем F6 и в минибуфере вводим часть имени искомой функции и TAB'ом дополняем. Нажали Enter — и мы на определении искомой функции:
;#+begin_src emacs-lisp
(require 'imenu)
(setq imenu-auto-rescan      t) ;; автоматически обновлять список функций в буфере
(setq imenu-use-popup-menu nil) ;; диалоги Imenu только в минибуфере
(global-set-key (kbd "<f6>") 'imenu) ;; вызов Imenu на F6
;#+end_src
** Magit
#+begin_src emacs-lisp
(use-package magit)
;; for vim-like keybindings in magit
;(use-package evil-collection
 ; :ensure t
  ;:after evil
  ;:init
  ;(evil-collection-init))
#+end_src

#+begin_src emacs-lisp
(show-paren-mode t) ;; show parentesis{},[],()
;; Delete selection
(delete-selection-mode t)
#+end_src

** Disable Electric Indent
#+begin_src emacs-lisp
(electric-indent-mode -1)
(electric-pair-mode    1) ;; автозакрытие {},[],() с переводом курсора внутрь скобок
#+end_src

* BUFFER-MOVE
Creating some functions to allow us to easily move windows (splits) around.  The following block of code was taken from buffer-move.el found on the EmacsWiki:
https://www.emacswiki.org/emacs/buffer-move.el

#+begin_src emacs-lisp
(global-set-key (kbd "C-<tab>") 'other-window)
;;change win focus S-<left> etc
(windmove-default-keybindings)
#+end_src

* GRAPHICAL USER INTERFACE TWEAKS
** Font and theme
#+begin_src emacs-lisp
    (set-frame-font "Comic Code Demo 20")
    (hl-line-mode nil)

    ;;theme customization
    (setq modus-themes-mode-line '(accented borderless padded))
    (setq modus-themes-region '(bg-only))
    (setq modus-themes-syntax '(faint))
    (setq modus-themes-syntax '(green-strings))

    (setq modus-themes-headings
          '((1 . (raindow  1.3))
             (2 . (raindow  1.2))
             (3 . (raindow  1.1))
            (t . (semilight 1.1))))
    (setq modus-themes-scale-headings t)
    ;(setq modus-themes-org-blocks 'gray-background)
  (load-theme 'modus-vivendi t)
#+end_src
** Disable Menubar, Toolbars and Scrollbars
#+begin_src emacs-lisp
  ;; Inhibit startup/splash screen
  (setq inhibit-splash-screen   t)
  (setq initial-buffer-choice nil)
  (setq ingibit-startup-message t) ;; no hello screen
  ;; Disable GUI components
  (tooltip-mode -1)
  (menu-bar-mode -1) 
  (tool-bar-mode  -1)
  (scroll-bar-mode -1) 
  (blink-cursor-mode nil) 

  (setq use-dialog-box nil)
  (setq redisplay-dont-pause t)  ;; better buffer rendering 
  (setq ring-bell-function 'ignore) ;; disable bell
  ;;(setq visible-bell t) ;; disable bell
#+end_src
** Recent files
#+begin_src emacs-lisp
(recentf-mode 1)
#+end_src
** Display Line Numbers and Truncated Lines
#+begin_src emacs-lisp
;; Display time in mode-line
(setq display-time-24hr-format t) ;; 24-часовой временной формат в mode-line
(display-time-mode             t) ;; показывать часы в mode-line

;;(global-display-line-numbers-mode nil)
;;(global-visual-line-mode t)
(setq display-line-numbers 'relative)
#+end_src

* IVY (COUNSEL)
+ Ivy, a generic completion mechanism for Emacs.
+ Counsel, a collection of Ivy-enhanced versions of common Emacs commands.
+ Ivy-rich allows us to add descriptions alongside the commands in M-x.
;#+begin_src emacs-lisp
  (use-package counsel
    :after ivy
    :config (counsel-mode))
  
  (use-package ivy
    :bind
    ;; ivy-resume resumes the last Ivy-based completion.
    (("C-c -r" . ivy-resume)
     ("C-x B" . ivy-switch-buffer-other-window))
    :custom
    (setq ivy-use-virtual-buffers t)
    (setq ivy-count-format "(%d/%d) ")
    (setq enable-recursive-minibuffers t)
    :config
    (ivy-mode))
  (use-package all-the-icons-ivy-rich
    :ensure t
    :init (all-the-icons-ivy-rich-mode 1))

  (use-package ivy-rich
    :after ivy
    :ensure t
    :init (ivy-rich-mode 1) ;; this gets us descriptions in M-x.
    :custom
    (ivy-virtual-abbreviate 'full
     ivy-rich-switch-buffer-align-virtual-buffer t
     ivy-rich-path-style 'abbrev)
    :config
    (ivy-set-display-transformer 'ivy-switch-buffer
                                 'ivy-rich-switch-buffer-transformer)

;#+end_src

* ORG MODE
#+begin_src emacs-lisp
(use-package org-roam)
#+end_src
enabling org babel for python eval
#+begin_src emacs-lisp
  (setq org-babel-python-command "python3")
   (org-babel-do-load-languages
    'org-babel-load-languages
    '((python . t)))
#+end_src
** Enabling Org Bullets
Org-bullets gives us attractive bullets rather than asterisks.
#+begin_src emacs-lisp
  (add-hook 'org-mode-hook 'org-indent-mode)
  (use-package org-bullets)
  (add-hook 'org-mode-hook (lambda () (org-bullets-mode 1)))
#+end_src
** Source Code Block Tag Expansion
Org-tempo is not a separate package but a module within org that can be enabled.  Org-tempo allows for '<s' followed by TAB to expand to a begin_src tag.  Other expansions available include:

| Typing the below + TAB | Expands to ...                          |
|------------------------+-----------------------------------------|
| <a                      | '#+BEGIN_EXPORT ascii' … '#+END_EXPORT  |
| <c                      | '#+BEGIN_CENTER' … '#+END_CENTER'       |
| <C                      | '#+BEGIN_COMMENT' … '#+END_COMMENT'     |
| <E                      | '#+BEGIN_EXPORT' … '#+END_EXPORT'       |
| <h                      | '#+BEGIN_EXPORT html' … '#+END_EXPORT'  |
| <l                      | '#+BEGIN_EXPORT latex' … '#+END_EXPORT' |
| <q                      | '#+BEGIN_QUOTE' … '#+END_QUOTE'         |
| <s                      | '#+BEGIN_SRC' … '#+END_SRC'             |
| <el                     | '#+BEGIN_SRC emacs-lisp' … '#+END_SRC'  |
| <v                      | '#+BEGIN_VERSE' … '#+END_VERSE'         |


#+begin_src emacs-lisp 
(require 'org-tempo)
#+end_src

* WHICH-KEY
#+begin_src emacs-lisp
  (use-package which-key
    :init
      (which-key-mode 1)
    :config
    (setq which-key-side-window-location 'bottom
	  which-key-sort-order #'which-key-key-order-alpha
	  which-key-sort-uppercase-first nil
	  which-key-add-column-padding 1
	  which-key-max-display-columns nil
	  which-key-min-display-lines 6
	  which-key-side-window-slot -10
	  which-key-side-window-max-height 0.25
	  which-key-idle-delay 0.8
	  which-key-max-description-length 25
	  which-key-allow-imprecise-window-fit t
	  which-key-separator " → " ))
#+end_src

;;#+begin_src emacs-lisp
(require 'lsp-python-ms)
(setq lsp-python-ms-auto-install-server t)
(add-hook 'python-mode-hook #'lsp) ; or lsp-deferred

(use-package lsp-python-ms
  :ensure t
  :init (setq lsp-python-ms-auto-install-server t)
  :hook (python-mode . (lambda ()
                          (require 'lsp-python-ms)
                          (lsp))))  ; or lsp-deferred
(use-package lsp-python-ms
  :ensure t
  :hook (python-mode . (lambda ()
                         (require 'lsp-python-ms)
                         (lsp)))
  :init
  (setq lsp-python-ms-executable (executable-find "python-language-server")))
;;#+end_src
