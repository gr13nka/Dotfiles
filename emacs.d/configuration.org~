 TITLE: Emacs configuration

* Use sensible-defaults.el

#+BEGIN_SRC emacs-lisp
  (load-file "~/.emacs.d/sensible_defaults/sensible-defaults.el")
  (sensible-defaults/use-all-settings)
  (sensible-defaults/use-all-keybindings)
#+END_SRC

#+BEGIN_SRC emacs-lisp
(require 'server)
(unless (server-running-p)
    (server-start)))
#+END_SRC

* Set personal information

#+BEGIN_SRC emacs-lisp
  (setq user-full-name "gr13nka"
        user-mail-address "gr13nka@yandex.ru")
#+END_SRC

* Add=resources= to =load-path=

#+BEGIN_SRC emacs-lisp
  (add-to-list 'load-path "~/.emacs.d/resources/")
#+END_SRC

* Package management

#+BEGIN_SRC emacs-lisp
  (require 'cask "~/.cask/cask.el")
  (cask-initialize)
#+END_SRC

* Utility functions

Define a big ol' bunch of handy utility functions.

#+BEGIN_SRC emacs-lisp

  (defun hrs/view-buffer-name ()
    "Display the filename of the current buffer."
    (interactive)
    (message (buffer-file-name)))

  (defun hrs/split-window-below-and-switch ()
    "Split the window horizontally, then switch to the new pane."
    (interactive)
    (split-window-below)
    (other-window 1))

  (defun hrs/split-window-right-and-switch ()
    "Split the window vertically, then switch to the new pane."
    (interactive)
    (split-window-right)
    (other-window 1))

  (defun hrs/de-unicode ()
    "Tidy up a buffer by replacing all special Unicode characters
       (smart quotes, etc.) with their more sane cousins"
    (interactive)
    (let ((unicode-map '(("[\u2018\|\u2019\|\u201A\|\uFFFD]" . "'")
                         ("[\u201c\|\u201d\|\u201e]" . "\"")
                         ("\u2013" . "--")
                         ("\u2014" . "---")
                         ("\u2026" . "...")
                         ("\u00A9" . "(c)")
                         ("\u00AE" . "(r)")
                         ("\u2122" . "TM")
                         ("[\u02DC\|\u00A0]" . " "))))
      (save-excursion
        (loop for (key . value) in unicode-map
              do
              (goto-char (point-min))
              (replace-regexp key value)))))

  (defun hrs/beautify-json ()
    "Pretty-print the JSON in the marked region. Currently shells
       out to `jsonpp'--be sure that's installed!"
    (interactive)
    (Save-excursion
      (shell-command-on-region (mark) (point) "jsonpp" (buffer-name) t)))

  (defun hrs/comment-or-uncomment-region-or-line ()
    "Comments or uncomments the region or the current line if there's no active region."
    (interactive)
    (let (beg end)
      (if (region-active-p)
          (setq beg (region-beginning) end (region-end))
        (setq beg (line-beginning-position) end (line-end-position)))
      (comment-or-uncomment-region beg end)))


  (defun hrs/kill-current-buffer ()
    "Kill the current buffer without prompting."
    (interactive)
    (kill-buffer (current-buffer)))

  (defun hrs/visit-last-dired-file ()
    "Open the last file in an open dired buffer."
    (end-of-buffer)
    (previous-line)
    (dired-find-file))

  (defun hrs/mac? ()
    "Returns `t' if this is an Apple machine, nil otherwise."
    (eq system-type 'darwin))

  (defun hrs/add-auto-mode (mode &rest patterns)
    "Add entries to `auto-mode-alist' to use `MODE' for all given file `PATTERNS'."
    (dolist (pattern patterns)
      (add-to-list 'auto-mode-alist (cons pattern mode))))

  (defun hrs/find-file-as-sudo ()
    (interactive)
    (let ((file-name (buffer-file-name)))
      (when file-name
        (find-alternate-file (concat "/sudo::" file-name)))))

  (defun hrs/generate-password ()
    "Insert a good alphanumeric password of length 30."
    (interactive)
    (hrs/insert-random-string 30))
#+END_SRC

* UI preferences

** Search
#+BEGIN_SRC emacs-lisp
(require 'ido)
(ido-mode t)
(setq ido-enable-flex-matching t)
#+END_SRC
** Fullscreen display on a Mac

I don't need to explicitly fullscreen Emacs on Debian (I'm already generally
using i3, which effectively fullscreens it anyway), but on a Mac it's nice to
have a little more space.

#+BEGIN_SRC emacs-lisp
  (when (hrs/mac?)
    (set-frame-parameter nil 'fullscreen 'fullboth))
#+END_SRC

** Disable window chrome

I don't usually use the menu or scroll bar, and they take up useful space.

#+BEGIN_SRC emacs-lisp
  (tool-bar-mode 0)
  (menu-bar-mode 0)
  (when window-system
    (scroll-bar-mode -1))
#+END_SRC

** Use fancy lambdas

Why not?

#+BEGIN_SRC emacs-lisp
  (global-prettify-symbols-mode t)
#+END_SRC

** Custom solarized-dark theme

#+BEGIN_SRC emacs-lisp
  (when window-system
    (setq solarized-use-variable-pitch nil)
    (setq solarized-height-plus-1 1.0)
    (setq solarized-height-plus-2 1.0)
    (setq solarized-height-plus-3 1.0)
    (setq solarized-height-plus-4 1.0)
    (setq solarized-high-contrast-mode-line t)
    (load-theme 'solarized-dark t))
#+END_SRC

** Highlight the current line
#+BEGIN_SRC emacs-lisp
  (when window-system
    (global-hl-line-mode))
#+END_SRC

** fucking yellow bell
#+BEGIN_SRC emacs-lisp
(setq visible-bell nil)
(setq ring-bell-function 'ignore)
#+END_SRC
** scroll
#+BEGIN_SRC emacs-lisp
  (setq scroll-conservatively 100)
#+END_SRC

* Programming customizations

Always use =auto-complete= when programming.

#+BEGIN_SRC emacs-lisp
  (require 'package)
  (add-to-list 'package-archives '("melpa" . "http://melpa.milkbox.net/packages/")t)
  (add-to-list 'package-archives '("org" . "http://orgmode.org/elpa/") t)
  (package-initialize)
#+END_SRC
** speedbar
#+BEGIN_SRC emacs-lisp
  (require 'sr-speedbar)
  (add-hook 'sr-speedbar-toggle
            '(lambda ()
	    (sr-speedbar-select-window))
  (add-hook 'sr-speedbar-toggle 'sr-speedbar-select-window))
#+END_SRC
** Working in the terminal

I use =multi-term= to manage my shell sessions.

Use a login shell.

#+BEGIN_SRC emacs-lisp
  (setq multi-term-program-switches "--login")
#+END_SRC

Don't use =yasnippet= expansion in the terminal. This is infuriating.

#+BEGIN_SRC emacs-lisp
(add-hook 'term-mode-hook
	  (lambda ()
            (define-key term-raw-map (kbd "M-o") 'other-window)
            (setq yas-dont-activate t)))
	  #+END_SRC

#+BEGIN_SRC emacs-lisp
  (setq scss-compile-at-save nil)
#+END_SRC

** Haskell

Enable =haskell-doc-mode=, which displays the type signature of a function, and
use smart indentation.

#+BEGIN_SRC emacs-lisp
  (add-hook 'haskell-mode-hook
            (lambda ()
              (turn-on-haskell-doc-mode)
              (turn-on-haskell-indent)))
#+END_SRC

** JavaScript and CoffeeScript

Indent everything by 2 spaces.

#+BEGIN_SRC emacs-lisp
  (setq js-indent-level 2)

  (add-hook 'coffee-mode-hook
            (lambda ()
              (yas-minor-mode 1)
              (setq coffee-tab-width 2)))
#+END_SRC

** Python

Indent 2 spaces.

#+BEGIN_SRC emacs-lisp
  (setq python-indent 2)
#+END_SRC

** =sh=

Indent with 2 spaces.

#+BEGIN_SRC emacs-lisp
  (add-hook 'sh-mode-hook
            (lambda ()
              (setq sh-basic-offset 2
                    sh-indentation 2)))
#+END_SRC

** Slim

If I'm editing Slim templates I'm probably in a Rails project. In that case, I'd
like to still be able to run my tests from a Slim buffer.

#+BEGIN_SRC emacs-lisp
  (add-hook 'slim-mode-hook 'rspec-mode)
#+END_SRC

** =web-mode=

If I'm in =web-mode=, I'd like to:

- Color color-related words with =rainbow-mode=.
- Still be able to run RSpec tests from =web-mode= buffers.
- Indent everything with 2 spaces.

#+BEGIN_SRC emacs-lisp
  (add-hook 'web-mode-hook
            (lambda ()
              (setq web-mode-markup-indent-offset 2)))
#+END_SRC

Use =web-mode= with embedded Ruby files, regular HTML, and PHP.

#+BEGIN_SRC emacs-lisp
  (hrs/add-auto-mode
   'web-mode
   "\\.erb$"
   "\\.html$"
   "\\.php$"
   "\\.rhtml$")
#+END_SRC

** YAML

If I'm editing YAML I'm usually in a Rails project. I'd like to be able to run
the tests from any buffer.

#+BEGIN_SRC emacs-lisp
  (add-hook 'yaml-mode-hook 'rspec-mode)
#+END_SRC

** lua
#+BEGIN_SRC emacs-lisp
(add-to-list 'load-path "/path/to/directory/where/lua-mode-el/resides")

    (autoload 'lua-mode "lua-mode" "Lua editing mode." t)
    (add-to-list 'auto-mode-alist '("\\.lua$" . lua-mode))
    (add-to-list 'interpreter-mode-alist '("lua" . lua-mode))
#+END_SRC
* Publishing and task managemen
** Display preferences

#+BEGIN_SRC emacs-lisp
(require 'org-bullets)
(add-hook 'org-mode-hook (lambda () (org-bullets-mode 1)))
#+END_SRC

** Task management

Store my org files in =~/org=, and archive finished tasks in
=~/org/archive.org=.

#+BEGIN_SRC emacs-lisp
  (setq org-directory "~/org")

  (defun org-file-path (filename)
    "Return the absolute address of an org file, given its relative name."
    (concat (file-name-as-directory org-directory) filename))

  (setq org-archive-location
        (concat (org-file-path "archive.org") "::* From %s"))
#+END_SRC

I store all my todos in =~/org/index.org=, so I'd like to derive my agenda from
there.

#+BEGIN_SRC emacs-lisp
    (setq org-agenda-files
          (list (org-file-path "index.org")))
#+END_SRC

Define a few common tasks as capture templates. Specifically, I frequently:

- Record ideas for future blog posts in =~/org/blog-ideas.org=,
- Keep a running grocery list in =~/org/groceries.org=, and
- Maintain a todo list in =~/org/index.org=.

#+BEGIN_SRC emacs-lisp
  (setq org-capture-templates
        '(
          ("t" "Todo"
           entry
           (file (org-file-path "index.org"))
           "* TODO %?\n")))
#+END_SRC

Hitting =C-c C-x C-s= will mark a todo as done and move it to an appropriate
place in the archive.

#+BEGIN_SRC emacs-lisp
  (defun mark-done-and-archive ()
    "Mark the state of an org-mode item as DONE and archive it."
    (interactive)
    (org-todo 'done)
    (org-archive-subtree))

  (define-key global-map "\C-c\C-x\C-s" 'mark-done-and-archive)
#+END_SRC

Record the time that a todo was archived.

#+BEGIN_SRC emacs-lisp
  (setq org-log-done 'time)
#+END_SRC

**** Keybindings

Hit =C-c i= to quickly open up my todo list.

#+BEGIN_SRC emacs-lisp
  (defun open-index-file ()
    "Open the master org TODO list."
    (interactive)
    (find-file (org-file-path "index.org"))
    (end-of-buffer))

#+END_SRC

Hit =M-n= to quickly open up a capture template for a new todo.

#+BEGIN_SRC emacs-lisp
  (defun org-capture-todo ()
    (interactive)
    (org-capture :keys "t"))
#+END_SRC

** Exporting

Allow export to markdown and beamer (for presentations).

#+BEGIN_SRC emacs-lisp
  (require 'ox-md)
  (require 'ox-beamer)
#+END_SRC

Allow =babel= to evaluate Emacs lisp, Ruby, dot, or Gnuplot code.

#+BEGIN_SRC emacs-lisp
  (org-babel-do-load-languages
   'org-babel-load-languages
   '((emacs-lisp . t)
     (ruby . t)
     (dot . t)
     (gnuplot . t)))
#+END_SRC

Don't ask before evaluating code blocks.

#+BEGIN_SRC emacs-lisp
  (setq org-confirm-babel-evaluate nil)
#+END_SRC

Associate the "dot" language with the =graphviz-dot= major mode.

#+BEGIN_SRC emacs-lisp
  (add-to-list 'org-src-lang-modes '("dot" . graphviz-dot))
#+END_SRC

Translate regular ol' straight quotes to typographically-correct curly quotes
when exporting.

#+BEGIN_SRC emacs-lisp
  (setq org-export-with-smart-quotes t)
#+END_SRC

**** Exporting to HTML

Don't include a footer with my contact and publishing information at the bottom
of every exported HTML document.

#+BEGIN_SRC emacs-lisp
  (setq org-html-postamble nil)
#+END_SRC

**** Exporting to PDF

I want to produce PDFs with syntax highlighting in the code. The best way to do
that seems to be with the =minted= package, but that package shells out to
=pygments= to do the actual work. =pdflatex= usually disallows shell commands;
this enables that.

#+BEGIN_SRC emacs-lisp
  (setq org-latex-pdf-process
        '("pdflatex -shell-escape -interaction nonstopmode -output-directory %o %f"
          "pdflatex -shell-escape -interaction nonstopmode -output-directory %o %f"
          "pdflatex -shell-escape -interaction nonstopmode -output-directory %o %f"))
#+END_SRC

Include the =minted= package in all of my LaTeX exports.

#+BEGIN_SRC emacs-lisp
  (add-to-list 'org-latex-packages-alist '("" "minted"))
  (setq org-latex-listings 'minted)
#+END_SRC

** TeX configuration

I rarely write LaTeX directly any more, but I often export through it with
org-mode, so I'm keeping them together.

Automatically parse the file after loading it.

#+BEGIN_SRC emacs-lisp
  (setq TeX-parse-self t)
#+END_SRC

Always use =pdflatex= when compiling LaTeX documents. I don't really have any
use for DVIs.

#+BEGIN_SRC emacs-lisp
  (setq TeX-PDF-mode t)
#+END_SRC

Enable a minor mode for dealing with math (it adds a few useful keybindings),
and always treat the current file as the "main" file. That's intentional, since
I'm usually actually in an org document.

#+BEGIN_SRC emacs-lisp
  (add-hook 'LaTeX-mode-hook
            (lambda ()
              (LaTeX-math-mode)
              (setq TeX-master t)))
#+END_SRC

TeX Live on a Mac gets installed to a nonstandard directory. If we want to build
documents from inside Emacs we need to add those directories to our =$PATH=.

#+BEGIN_SRC emacs-lisp
  (when (hrs/mac?)
    (setenv "PATH"
            (concat (getenv "PATH")
                    ":" "/usr/local/texlive/2013basic/bin/universal-darwin"
                    ":" "/usr/local/texlive/2013/bin/universal-darwin"
                    ":" "/usr/local/bin")))
#+END_SRC

* dired

  #+BEGIN_SRC emacs-lisp
(setq dired-dwim-target t)
  #+END_SRC
* =evil-mode
Use =evil=

#+BEGIN_SRC emacs-lisp

  (add-to-list 'load-path "~/.emacs.d/evil")
  (require 'evil)
  (evil-mode 1)
#+END_SRC

When I'm starting an org capture template I'd like to begin in insert mode. I'm
opening it up in order to start typing something, so this skips a step.

#+BEGIN_SRC emacs-lisp
  (add-hook 'org-capture-mode-hook 'evil-insert-state)
#+END_SRC

Use "j" and "k" to move around in =dired=.

#+BEGIN_SRC emacs-lisp
  (evil-define-key 'normal dired-mode-map (kbd "j") 'dired-next-line)
  (evil-define-key 'normal dired-mode-map (kbd "k") 'dired-previous-line)
#+END_SRC
#+BEGIN_SRC emacs-lisp
  (autoload
  'ace-jump-mode-pop-mark
  "ace-jump-mode"
  "Ace jump back:-)"
  t)
  (eval-after-load "ace-jump-mode"
  '(ace-jump-mode-enable-mark-sync))
#+END_SRC

* terminal
#+BEGIN_SRC emacs-lisp
  (require 'multi-term)
  (setq multi-term-program-switches "--login")
  (setq multi-term-program "/bin/bash")



(defcustom multi-term-buffer-name "terminal"
  "The buffer name of term buffer."
  :type 'string
  :group 'multi-term)
#+END_SRC
** Look for executables in =/usr/local/bin=.

#+BEGIN_SRC emacs-lisp
  (setq exec-path (append exec-path '("/usr/local/bin")))
#+END_SRC

** Configure auto-complete

#+BEGIN_SRC emacs-lisp

  (require 'auto-complete-config)
  (ac-config-default)
  (package-initialize)
#+END_SRC

** Configure yasnippet

I keep my snippets in =~/.emacs/snippets/text-mode=, and I always want =yasnippet=
enabled.

#+BEGIN_SRC emacs-lisp
  (setq yas-snippet-dirs '("~/.emacs.d/snippets/text-mode"))
  (yas-global-mode 1)
#+END_SRC

I /don’t/ want =ido= to automatically indent the snippets it inserts. Sometimes
this looks pretty bad (when indenting org-mode, for example, or trying to guess
at the correct indentation for Python).

#+BEGIN_SRC emacs-lisp
  (setq yas/indent-line nil)
#+END_SRC

** Use =smex= to handle =M-x= with =ido=
#+BEGIN_SRC emacs-lisp
  (smex-initialize)
#+END_SRC

** Editing with Markdown

Because I can't always use =org=.

I'd like spell-checking running when editing Markdown.

#+BEGIN_SRC emacs-lisp
  (add-hook 'markdown-mode-hook 'flyspell-mode)
#+END_SRC

Associate =.md= files with Markdown.

#+BEGIN_SRC emacs-lisp
  (hrs/add-auto-mode 'markdown-mode "\\.md$")
#+END_SRC

** Enable region case modification

#+BEGIN_SRC emacs-lisp
  (put 'downcase-region 'disabled nil)
  (put 'upcase-region 'disabled nil)
#+END_SRC

** Mass editing of =grep= results

I like the idea of mass editing =grep= results the same way I can edit filenames
in =dired=. These keybindings allow me to use =C-x C-q= to start editing =grep=
results and =C-c C-c= to stop, just like in =dired=.

#+BEGIN_SRC emacs-lisp
  (eval-after-load 'grep
    '(define-key grep-mode-map
      (kbd "C-x C-q") 'wgrep-change-to-wgrep-mode))

  (eval-after-load 'wgrep
    '(define-key grep-mode-map
      (kbd "C-c C-c") 'wgrep-finish-edit))

  (setq wgrep-auto-save-buffer t)
#+END_SRC

** Configure =wrap-region=

#+BEGIN_SRC emacs-lisp
  (wrap-region-global-mode t)
  (wrap-region-add-wrapper "/" "/" nil 'ruby-mode)
  (wrap-region-add-wrapper "`" "`" nil '(markdown-mode ruby-mode))
#+END_SRC

** Split horizontally for temporary buffers

Horizonal splits are nicer for me, since I usually use a wide monitor. This is
handy for handling temporary buffers (like compilation or test output).

#+BEGIN_SRC emacs-lisp
  (defun hrs/split-horizontally-for-temp-buffers ()
    (when (one-window-p t)
      (split-window-horizontally)))

  (add-hook 'temp-buffer-window-setup-hook
            'hrs/split-horizontally-for-temp-buffers)
#+END_SRC

** Use projectile everywhere

#+BEGIN_SRC emacs-lisp
  (projectile-global-mode)
#+END_SRC
* Writing prose

** Enable region case modification

#+BEGIN_SRC emacs-lisp
  (put 'downcase-region 'disabled nil)
  (put 'upcase-region 'disabled nil)
#+END_SRC

* Editing settings
** Quickly visit Emacs configuration

I futz around with my dotfiles a lot. This binds =C-c e= to quickly open my
Emacs configuration file.

#+BEGIN_SRC emacs-lisp
  (defun hrs/visit-emacs-config ()
    (interactive)
    (find-file "~/.emacs.d/configuration.org"))

#+END_SRC

** Switch and rebalance windows when splitting

#+BEGIN_SRC emacs-lisp
  (defun hrs/split-window-below-and-switch ()
    "Split the window horizontally, then switch to the new pane."
    (interactive)
    (split-window-below)
    (balance-windows)
    (other-window 1))

  (defun hrs/split-window-right-and-switch ()
    "Split the window vertically, then switch to the new pane."
    (interactive)
    (split-window-right)
    (balance-windows)
    (other-window 1))
#+END_SRC

** c#
#+BEGIN_SRC emacs-lisp
(defun my-csharp-mode-hook ()
  ;; enable the stuff you want for C# here
  (electric-pair-mode 1)       ;; Emacs 24
  (electric-pair-local-mode 1) ;; Emacs 25
  )
(add-hook 'csharp-mode-hook 'my-csharp-mode-hook)
#+END_SRC
* engine
#+BEGIN_SRC emacs-lisp
  (require 'engine-mode)

  (defengine github
    "https://github.com/search?ref=simplesearch&q=%s"
    :keybinding "g")

  (defengine yandex
          "https://yandex.ru/search/?lr=213&text=%s"
          :keybinding "y")

  (defengine youtube
    "http://www.youtube.com/results?aq=f&oq=&search_query=%s"
    :keybinding "u")

  (engine-mode t)
#+END_SRC
* Set custom keybindings

Just a few handy functions.

engine mode
C-x /u(youtube),y(yandex),g(github)
#+BEGIN_SRC emacs-lisp
  (global-set-key (kbd "C-w") 'backward-kill-word)
  (global-set-key (kbd "M-z") 'other-window)

;;windows split
  (global-set-key (kbd "C-x 2") 'hrs/split-window-below-and-switch)
  (global-set-key (kbd "C-x 3") 'hrs/split-window-right-and-switch)

  (global-set-key (kbd "C-x k") 'hrs/kill-current-buffer)

  (global-set-key (kbd "C-x e") 'hrs/visit-emacs-config)

  (global-set-key (kbd "<f12>") 'sr-speedbar-toggle)
  (global-set-key (kbd "C-M-w") 'sr-speedbar-close)
  (global-set-key (kbd "M-t") 'shell-pop)

  (define-key global-map "\C-c\C-x\C-s" 'mark-done-and-archive)
  (define-key global-map "\C-cl" 'org-store-link)
  (define-key global-map "\C-ca" 'org-agenda)
  (define-key global-map "\C-cc" 'org-capture)

 (global-set-key (kbd "C-c i") 'open-index-file)
 (global-set-key (kbd "M-n") 'org-capture-todo)

  (define-key evil-normal-state-map (kbd "C-p") 'projectile-find-file)

  (define-key global-map (kbd "C-x SPC") 'ace-jump-mode-pop-mark)
  (define-key global-map (kbd "C-q") 'ace-jump-mode)

(global-set-key (kbd "C-c s") 'multi-term)

  (global-set-key (kbd "M-x") 'smex)
  (global-set-key (kbd "M-X") 'smex-major-mode-commands)

(global-set-key [f2] 'kmacro-call-macro)
(global-set-key [f3] 'kmacro-start-macro-or-insert-counter)
(global-set-key [f4] 'kmacro-end-or-call-macro)
(global-set-key [f5] 'bookmark-set)
(global-set-key [f6] 'bookmark-jump)
#+END_SRC
